<?php

namespace Codedor\FormArchitect\Facades;

use Illuminate\Support\Facades\Facade;

/**
 * @method static \Codedor\FormArchitect\BlockCollection fromConfig()
 * @method static \Illuminate\Contracts\View\View render(array $blocks)
 * @method static array filamentBlocks()
 * @method static \Codedor\FormArchitect\BlockCollection range(int $from, int $to)
 * @method static array all()
 * @method static \Illuminate\Support\LazyCollection lazy()
 * @method static float|int|null avg(callable|int)|string|null $callback = null)
 * @method static float|int|null median(string|array|null $key = null)
 * @method static array|null mode(string|array|null $key = null)
 * @method static \Codedor\FormArchitect\BlockCollection collapse()
 * @method static bool contains(callable||string $key, mixed $operator = null, mixed $value = null)
 * @method static bool containsStrict(callable| $key, |null $value = null)
 * @method static bool doesntContain(mixed $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FormArchitect\BlockCollection crossJoin(\Illuminate\Contracts\Support\Arrayable|iterable ...$lists)
 * @method static \Codedor\FormArchitect\BlockCollection diff(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection diffUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection diffAssoc(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection diffAssocUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection diffKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection diffKeysUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection duplicates(callable|string|null $callback = null, bool $strict = false)
 * @method static \Codedor\FormArchitect\BlockCollection duplicatesStrict(callable|string|null $callback = null)
 * @method static \Codedor\FormArchitect\BlockCollection except(\Illuminate\Support\Enumerable|array|string $keys)
 * @method static \Codedor\FormArchitect\BlockCollection filter(callable|null $callback = null)
 * @method static  first(callable|null $callback = null, |\Closure $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection flatten(int $depth = unknown)
 * @method static \Codedor\FormArchitect\BlockCollection flip()
 * @method static \Codedor\FormArchitect\BlockCollection forget(void $keys)
 * @method static  get(void $key, |\Closure $default = null)
 * @method static  getOrPut(mixed $key, |\Closure $value)
 * @method static \Codedor\FormArchitect\BlockCollection groupBy(callable|array|string $groupBy, bool $preserveKeys = false)
 * @method static \Codedor\FormArchitect\BlockCollection keyBy(callable|array|string $keyBy)
 * @method static bool has(|array $key)
 * @method static bool hasAny(mixed $key)
 * @method static string implode(callable|string $value, string|null $glue = null)
 * @method static \Codedor\FormArchitect\BlockCollection intersect(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection intersectUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection intersectAssoc(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection intersectAssocUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection intersectByKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static bool isEmpty()
 * @method static bool containsOneItem()
 * @method static string join(string $glue, string $finalGlue = '')
 * @method static \Codedor\FormArchitect\BlockCollection keys()
 * @method static  last(callable|null $callback = null, |\Closure $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection pluck(string|int|array $value, string|null $key = null)
 * @method static \Codedor\FormArchitect\BlockCollection map(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection mapToDictionary(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection mapWithKeys(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection merge(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection mergeRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection combine(\Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FormArchitect\BlockCollection union(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection nth(int $step, int $offset = 0)
 * @method static \Codedor\FormArchitect\BlockCollection only(\Illuminate\Support\Enumerable|array|string|null $keys)
 * @method static \Codedor\FormArchitect\BlockCollection||null pop(int $count = 1)
 * @method static \Codedor\FormArchitect\BlockCollection prepend(void $value, void $key = null)
 * @method static \Codedor\FormArchitect\BlockCollection push(void ...$values)
 * @method static \Codedor\FormArchitect\BlockCollection concat(iterable $source)
 * @method static  pull(void $key, |\Closure $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection put(void $key, void $value)
 * @method static \Codedor\FormArchitect\BlockCollection| random(callable|int|null $number = null, bool $preserveKeys = false)
 * @method static \Codedor\FormArchitect\BlockCollection replace(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection replaceRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection reverse()
 * @method static |false search(|callable $value, bool $strict = false)
 * @method static \Codedor\FormArchitect\BlockCollection||null shift(int $count = 1)
 * @method static \Codedor\FormArchitect\BlockCollection shuffle(int|null $seed = null)
 * @method static \Codedor\FormArchitect\BlockCollection sliding(int $size = 2, int $step = 1)
 * @method static \Codedor\FormArchitect\BlockCollection skip(int $count)
 * @method static \Codedor\FormArchitect\BlockCollection skipUntil(|callable $value)
 * @method static \Codedor\FormArchitect\BlockCollection skipWhile(|callable $value)
 * @method static \Codedor\FormArchitect\BlockCollection slice(int $offset, int|null $length = null)
 * @method static \Codedor\FormArchitect\BlockCollection split(int $numberOfGroups)
 * @method static \Codedor\FormArchitect\BlockCollection splitIn(int $numberOfGroups)
 * @method static void sole(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static void firstOrFail(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FormArchitect\BlockCollection chunk(int $size)
 * @method static \Codedor\FormArchitect\BlockCollection chunkWhile(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection sort(callable|null|int $callback = null)
 * @method static \Codedor\FormArchitect\BlockCollection sortDesc(int $options = 0)
 * @method static \Codedor\FormArchitect\BlockCollection sortBy(array|callable|string $callback, int $options = 0, bool $descending = false)
 * @method static \Codedor\FormArchitect\BlockCollection sortByDesc(array|callable|string $callback, int $options = 0)
 * @method static \Codedor\FormArchitect\BlockCollection sortKeys(int $options = 0, bool $descending = false)
 * @method static \Codedor\FormArchitect\BlockCollection sortKeysDesc(int $options = 0)
 * @method static \Codedor\FormArchitect\BlockCollection sortKeysUsing(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection splice(int $offset, int|null $length = null, array $replacement = [])
 * @method static \Codedor\FormArchitect\BlockCollection take(int $limit)
 * @method static \Codedor\FormArchitect\BlockCollection takeUntil(|callable $value)
 * @method static \Codedor\FormArchitect\BlockCollection takeWhile(|callable $value)
 * @method static \Codedor\FormArchitect\BlockCollection transform(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection dot()
 * @method static \Codedor\FormArchitect\BlockCollection undot()
 * @method static \Codedor\FormArchitect\BlockCollection unique(callable|string|null $key = null, bool $strict = false)
 * @method static \Codedor\FormArchitect\BlockCollection values()
 * @method static \Codedor\FormArchitect\BlockCollection zip(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FormArchitect\BlockCollection pad(int $size, void $value)
 * @method static \ArrayIterator getIterator()
 * @method static int count()
 * @method static \Codedor\FormArchitect\BlockCollection countBy(callable|string|null $countBy = null)
 * @method static \Codedor\FormArchitect\BlockCollection add(void $item)
 * @method static \Illuminate\Support\Collection toBase()
 * @method static \Codedor\FormArchitect\BlockCollection make(\Illuminate\Contracts\Support\Arrayable|iterable|null $items = [])
 * @method static \Codedor\FormArchitect\BlockCollection wrap(iterable| $value)
 * @method static array unwrap(array|\Codedor\FormArchitect\BlockCollection $value)
 * @method static \Codedor\FormArchitect\BlockCollection empty()
 * @method static \Codedor\FormArchitect\BlockCollection times(int $number, callable|null $callback = null)
 * @method static float|int|null average(callable|int)|string|null $callback = null)
 * @method static bool some(callable||string $key, mixed $operator = null, mixed $value = null)
 * @method static never dd(mixed ...$args)
 * @method static \Codedor\FormArchitect\BlockCollection dump()
 * @method static \Codedor\FormArchitect\BlockCollection each(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection eachSpread(callable $callback)
 * @method static bool every(callable||string $key, mixed $operator = null, mixed $value = null)
 * @method static |null firstWhere(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static  value(string $key, |\Closure $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection ensure(string $type)
 * @method static bool isNotEmpty()
 * @method static \Codedor\FormArchitect\BlockCollection mapSpread(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection mapToGroups(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection flatMap(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection mapInto(string $class)
 * @method static mixed min(callable|string|null $callback = null)
 * @method static mixed max(callable|string|null $callback = null)
 * @method static \Codedor\FormArchitect\BlockCollection forPage(int $page, int $perPage)
 * @method static \Codedor\FormArchitect\BlockCollection partition(callable||string $key, |string|null $operator = null, |null $value = null)
 * @method static float|null percentage(callable $callback, int $precision = 2)
 * @method static mixed sum(callable|string|null $callback = null)
 * @method static \Codedor\FormArchitect\BlockCollection| whenEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection| whenNotEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection| unlessEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection| unlessNotEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection where(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FormArchitect\BlockCollection whereNull(string|null $key = null)
 * @method static \Codedor\FormArchitect\BlockCollection whereNotNull(string|null $key = null)
 * @method static \Codedor\FormArchitect\BlockCollection whereStrict(string $key, mixed $value)
 * @method static \Codedor\FormArchitect\BlockCollection whereIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \Codedor\FormArchitect\BlockCollection whereInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FormArchitect\BlockCollection whereBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FormArchitect\BlockCollection whereNotBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FormArchitect\BlockCollection whereNotIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \Codedor\FormArchitect\BlockCollection whereNotInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FormArchitect\BlockCollection whereInstanceOf(string|array $type)
 * @method static void pipe(callable $callback)
 * @method static void pipeInto(string $class)
 * @method static mixed pipeThrough(array $callbacks)
 * @method static void reduce(callable $callback, void $initial = null)
 * @method static array reduceSpread(callable $callback, mixed ...$initial)
 * @method static void reduceWithKeys(callable $callback, void $initial = null)
 * @method static \Codedor\FormArchitect\BlockCollection reject(callable|bool| $callback = true)
 * @method static \Codedor\FormArchitect\BlockCollection tap(callable $callback)
 * @method static \Codedor\FormArchitect\BlockCollection uniqueStrict(callable|string|null $key = null)
 * @method static \Illuminate\Support\Collection collect()
 * @method static array toArray()
 * @method static array jsonSerialize()
 * @method static string toJson(int $options = 0)
 * @method static \CachingIterator getCachingIterator(int $flags = 1)
 * @method static \Codedor\FormArchitect\BlockCollection escapeWhenCastingToString(bool $escape = true)
 * @method static void proxy(string $method)
 * @method static \Codedor\FormArchitect\BlockCollection|mixed when(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static \Codedor\FormArchitect\BlockCollection|mixed unless(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static void macro(string $name, object|callable $macro)
 * @method static void mixin(object $mixin, bool $replace = true)
 * @method static bool hasMacro(string $name)
 * @method static void flushMacros()
 *
 * @see \Codedor\FormArchitect\BlockCollection
 */
class BlockCollection extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return \Codedor\FormArchitect\BlockCollection::class;
    }
}
